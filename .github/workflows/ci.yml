name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_ENV: test

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: TypeScript type check
      run: npm run typecheck
      
    - name: Build application
      run: npm run build
      
    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        
    - name: Generate test coverage
      run: npm run test:coverage
      env:
        NODE_ENV: test
        
    - name: Upload coverage reports to Codecov
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        
  build-docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Test Docker build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: neo-financial:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  performance:
    name: Performance Tests  
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Start server for performance testing
      run: |
        npm start &
        sleep 10
        
    - name: Basic health check
      run: |
        curl -f http://localhost:3000/api/health || exit 1
        
    - name: API response time test
      run: |
        response_time=$(curl -o /dev/null -s -w '%{time_total}' http://localhost:3000/api/health)
        echo "Health check response time: ${response_time}s"
        if (( $(echo "$response_time > 1.0" | bc -l) )); then
          echo "Response time too slow: ${response_time}s"
          exit 1
        else
          echo "Response time acceptable: ${response_time}s"
        fi